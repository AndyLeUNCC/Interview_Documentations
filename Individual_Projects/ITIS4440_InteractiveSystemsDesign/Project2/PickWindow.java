package uncc.project2;/** * PickWindow.java * ITIS 4440/6370 User Interface Design and Implementation * @author manuel a. perez-quinones, UNC Charlotte (formerly Virginia Tech) * CS 5774 User Interface Software * copyright manuel a. perez-quinones, virginia tech * see full copyright notice at end of file * * Sample program demostrating pick correlation of mouse interactions. * This class represents a [R]ectangular object on the screen. * * Comipile: javac Pick.java * Run:      java Pick [name of window | 1 | 2 | 3] */import java.awt.*;import javax.swing.*;import java.awt.event.*;import java.util.*;class PickWindow extends SWindow {  public static void main(String args[])  {    new PickWindow();  }  Vector<RObject> objs = new Vector<RObject>();  RObject dragging = null;		/* keeps track of the object being dragged around */  Point offset;								/* offset from the corner of the object to the click loc */  int pickType = 1;						/* type of pick correlation we are doing */  /* constructor */  public PickWindow() {    super("PickWindow");  }    public void paintCanvas(Graphics2D g)  {    for (int i = 0; i < objs.size(); i++)      /* don't draw the object being dragged */      if (objs.elementAt(i) != dragging)        objs.elementAt(i).draw(g);    /* draw it last */    if (dragging != null)      dragging.draw(g);  }    public void init()  {    JMenu edit = getEditMenu();    edit.addSeparator();    installMenuItem(edit, "Pick by containment",         () -> {          setStatus("Pick by containment");          pickType = 1;        });    installMenuItem(edit, "Pick by gravity (15)",         () -> {          setStatus("Pick by gravity (15)");          pickType = 2;        });    installMenuItem(edit, "Pick by closest",         () -> {          setStatus("Pick by closest");          pickType = 3;        });    installMenuItem(edit, "Bad dragging",         () -> {          setStatus("Bad dragging");          pickType = 4;        });      /* Add three objects to the window to start the app */      objs.add(new RObject(10, 10, new Color(39,37,31), 15));      objs.add(new RObject(20, 20, new Color(185,151,91), 15));      objs.add(new RObject(30, 30, new Color(4,106,56), 15));      setStatus("Pick by containment");      pickType = 1;  }  /* distance between two points */  double distance(Point pt1, Point pt2) {    int x = pt1.x - pt2.x;    int y = pt1.y - pt2.y;    double d = Math.sqrt(x*x + y*y);    return d;  }	/* Find an object using a point */  RObject findByPt(Point p) {    if (pickType == 1) {      /* Example 1 -  containment */      for (int i = objs.size()-1; i >= 0; i--)        if (objs.elementAt(i).containsPt(p))          return  objs.elementAt(i);      return null;    }    else if (pickType == 2) {      /* Example 2 -  gravity */      for (int i = objs.size()-1; i >= 0; i--)        if (objs.elementAt(i).withinGravity(p))          return objs.elementAt(i);      return null;    }    else if (pickType == 3) {      /* Example 3 -  closest */      double min, t;      int idx = 0;      min = distance(p, objs.elementAt(0).center());      for (int i = 1; i < objs.size(); i++) {        t = distance(p, objs.elementAt(i).center());        if (t < min) {          min = t;          idx = i;        }      }      return objs.elementAt(idx);    }    else {      /* Example 4 -  containment but bad example because of overlaps */      for (int i = 0; i < objs.size(); i++)        if (objs.elementAt(i).containsPt(p))          return objs.elementAt(i);      return null;    }  }	/* Mouse Pressed: find an object and keep offset */  public void mousePressed(MouseEvent e) {    dragging = findByPt(e.getPoint());    if (dragging != null)      offset = new Point(e.getX() - dragging.x, e.getY() - dragging.y);  }	/* Mouse Dragged: mouse was pressed already, now we are moving */  public void mouseDragged(MouseEvent e) {    if (dragging != null) {      repaint();      dragging.x = e.getX() - offset.x;      dragging.y = e.getY() - offset.y;      repaint();    }  }	/* Mouse button was pressed, possibly dragged and now released */  public void mouseReleased(MouseEvent e) {    if (dragging != null) {      objs.remove(dragging);      objs.add(dragging);   /* puts it back at the end of the queue */          dragging = null;      repaint();    }  }}/* * Copyright: This programming assignment specification and the  * provided sample code are protected by copyright. The professor  * is the exclusive owner of copyright of this material. You are  * encouraged to take notes and make copies of the specification  * and the source code for your own educational use. However, you  * may not, nor may you knowingly allow others to reproduce or  * distribute the materials publicly without the express written  * consent of the professor. This includes providing materials to  * commercial course material suppliers such as CourseHero and  * other similar services. Students who publicly distribute or  * display or help others publicly distribute or display copies or  * modified copies of this material may be in violation of  * University Policy 406, The Code of Student Responsibility * https://legal.uncc.edu/policies/up-406. * */